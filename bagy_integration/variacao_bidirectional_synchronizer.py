"""
Vers√£o final do sincronizador bidirecional com suporte total para varia√ß√µes como produtos independentes.
Esta implementa√ß√£o garante que cada varia√ß√£o de produto seja tratada como um produto 
completamente independente na Bagy.
"""
import logging
import time
from datetime import datetime
import os
import json

from api_clients import BagyClient, GestaoClickClient
from new_product_converter import ProductConverter
from storage import IncompleteProductsStorage, EntityMapping
from utils import Pagination

class VariacaoBidirectionalSynchronizer:
    """
    Sincronizador bidirecional que trata todas as varia√ß√µes como produtos independentes.
    Esta √© a implementa√ß√£o final do sincronizador que resolve o problema das varia√ß√µes.
    """
    
    def __init__(self, product_converter=None, incomplete_products_storage=None):
        """
        Inicializa o sincronizador com suporte a varia√ß√µes.
        
        Args:
            product_converter: Conversor de produtos
            incomplete_products_storage: Armazenamento de produtos incompletos
        """
        self.logger = logging.getLogger(self.__class__.__name__)
        
        # Criar clientes de API
        self.bagy_client = BagyClient(os.environ.get('BAGY_API_KEY'))
        self.gc_client = GestaoClickClient(
            os.environ.get('GESTAOCLICK_API_KEY'),
            os.environ.get('GESTAOCLICK_EMAIL')
        )
        
        # Configurar armazenamentos
        storage_dir = os.environ.get('STORAGE_DIR', './data')
        os.makedirs(storage_dir, exist_ok=True)
        
        self.incomplete_products = incomplete_products_storage or IncompleteProductsStorage(f"{storage_dir}/incomplete_products.json")
        self.entity_mapping = EntityMapping(f"{storage_dir}/entity_mapping.json")
        
        # Configurar conversor de produtos
        self.product_converter = product_converter or ProductConverter(incomplete_products_storage=self.incomplete_products)
    
    def _process_product_variation(self, gc_product):
        """
        Processa um produto e suas varia√ß√µes como produtos independentes.
        
        Args:
            gc_product (dict): Produto do Gest√£oClick
            
        Returns:
            dict: Estat√≠sticas de processamento (sucesso, erros)
        """
        stats = {
            'success': 0,
            'errors': 0
        }
        
        # Converter o produto em uma lista de produtos Bagy (um para cada varia√ß√£o)
        bagy_products = self.product_converter.gestaoclick_to_bagy(gc_product)
        
        # Se nenhum produto foi convertido, retornar estat√≠sticas vazias
        if not bagy_products:
            return stats
        
        # Processar cada produto convertido
        for bagy_product in bagy_products:
            try:
                external_id = bagy_product.get('external_id')
                product_name = bagy_product.get('name')
                
                # Verificar se o produto j√° existe na Bagy
                existing_product = self.bagy_client.get_product_by_external_id(external_id)
                
                if not existing_product:
                    # Criar novo produto
                    self.logger.info(f"üì¶ Criando produto na Bagy: {product_name} (external_id: {external_id})")
                    new_product = self.bagy_client.create_product(bagy_product)
                    
                    if new_product and 'id' in new_product:
                        # Produto criado com sucesso, registrar no mapeamento
                        self.entity_mapping.add_mapping(
                            entity_type='product',
                            bagy_id=new_product['id'],
                            gestaoclick_id=external_id
                        )
                        stats['success'] += 1
                        self.logger.info(f"‚úÖ Produto criado com sucesso: {product_name} (ID: {new_product['id']})")
                    else:
                        stats['errors'] += 1
                        self.logger.error(f"‚ùå Falha ao criar produto: {product_name}")
                else:
                    # Atualizar produto existente
                    bagy_id = existing_product.get('id')
                    self.logger.info(f"üîÑ Atualizando produto: {product_name} (ID: {bagy_id})")
                    
                    # Preparar dados para atualiza√ß√£o
                    update_data = {
                        'name': bagy_product.get('name'),
                        'description': bagy_product.get('description'),
                        'price': bagy_product.get('price'),
                        'price_compare': bagy_product.get('price_compare'),
                        'balance': bagy_product.get('balance'),
                        'height': bagy_product.get('height'),
                        'width': bagy_product.get('width'),
                        'depth': bagy_product.get('depth'),
                        'weight': bagy_product.get('weight')
                    }
                    
                    # Verificar se SKU precisa ser atualizado
                    current_sku = existing_product.get('sku')
                    new_sku = bagy_product.get('sku')
                    
                    if current_sku != new_sku and new_sku:
                        update_data['sku'] = str(new_sku)
                        update_data['reference'] = str(new_sku)
                        update_data['code'] = str(new_sku)
                    
                    # Atualizar produto
                    updated_product = self.bagy_client.update_product(bagy_id, update_data)
                    
                    if updated_product:
                        stats['success'] += 1
                        self.logger.info(f"‚úÖ Produto atualizado com sucesso: {product_name} (ID: {bagy_id})")
                    else:
                        stats['errors'] += 1
                        self.logger.error(f"‚ùå Falha ao atualizar produto: {product_name} (ID: {bagy_id})")
            
            except Exception as e:
                stats['errors'] += 1
                self.logger.error(f"‚ùå Erro ao processar produto {bagy_product.get('name', 'Desconhecido')}: {str(e)}")
        
        return stats
    
    def sync_products_from_gestaoclick(self):
        """
        Sincroniza produtos do Gest√£oClick para a Bagy, tratando varia√ß√µes como produtos independentes.
        
        Returns:
            tuple: (sucesso, erros)
        """
        total_success = 0
        total_errors = 0
        incomplete_count = 0
        
        self.logger.info("üîÑ Iniciando sincroniza√ß√£o de produtos do Gest√£oClick para Bagy")
        
        # Obter todos os produtos da Gest√£oClick
        self.logger.info("üìã Buscando cat√°logo de produtos do Gest√£oClick...")
        
        try:
            # Usar pagina√ß√£o para obter todos os produtos
            pagination = Pagination()
            all_gestaoclick_products = pagination.get_all_pages(
                fetcher=self.gc_client.get_products,
                data_key='data'
            )
            
            self.logger.info(f"üì¶ Encontrados {len(all_gestaoclick_products)} produtos no Gest√£oClick")
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao obter produtos do Gest√£oClick: {str(e)}")
            return 0, 1
        
        # Processar cada produto
        for gc_product in all_gestaoclick_products:
            try:
                product_id = gc_product.get('id')
                product_name = gc_product.get('nome', 'Desconhecido')
                
                # Verificar se o produto tem varia√ß√µes
                has_variations = 'variacoes' in gc_product and gc_product['variacoes']
                
                if has_variations:
                    self.logger.info(f"üîÄ Produto {product_name} (ID: {product_id}) tem varia√ß√µes")
                    self.logger.info(f"   N√∫mero de varia√ß√µes: {len(gc_product['variacoes'])}")
                
                # Processar o produto (e suas varia√ß√µes, se houver)
                stats = self._process_product_variation(gc_product)
                
                # Atualizar contadores
                total_success += stats['success']
                total_errors += stats['errors']
                
                # Se n√£o tivemos sucesso com nenhuma varia√ß√£o, incrementar contador de incompletos
                if stats['success'] == 0 and stats['errors'] > 0:
                    incomplete_count += 1
            
            except Exception as e:
                total_errors += 1
                self.logger.error(f"‚ùå Erro ao processar produto {gc_product.get('nome', 'Desconhecido')} (ID: {gc_product.get('id', 'Desconhecido')}): {str(e)}")
        
        self.logger.info(f"‚ú® Sincroniza√ß√£o de produtos conclu√≠da: {total_success} com sucesso, {total_errors} erros, {incomplete_count} incompletos")
        return total_success, total_errors
    
    def sync_customers(self):
        """
        Sincroniza clientes do Bagy para o Gest√£oClick.
        
        Returns:
            tuple: (sucesso, erros)
        """
        total_success = 0
        total_errors = 0
        
        self.logger.info("üîÑ Iniciando sincroniza√ß√£o de clientes do Bagy para Gest√£oClick")
        
        try:
            # Obter clientes do Bagy
            pagination = Pagination()
            all_bagy_customers = pagination.get_all_pages(
                fetcher=self.bagy_client.get_customers,
                data_key='data'
            )
            
            self.logger.info(f"üë• Encontrados {len(all_bagy_customers)} clientes no Bagy")
            
            # Processar cada cliente
            for bagy_customer in all_bagy_customers:
                try:
                    # Implementa√ß√£o da sincroniza√ß√£o de clientes
                    pass
                except Exception as e:
                    total_errors += 1
                    self.logger.error(f"‚ùå Erro ao processar cliente: {str(e)}")
            
            self.logger.info(f"‚ú® Sincroniza√ß√£o de clientes conclu√≠da: {total_success} com sucesso, {total_errors} erros")
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao sincronizar clientes: {str(e)}")
            return 0, 1
        
        return total_success, total_errors
    
    def sync_orders(self):
        """
        Sincroniza pedidos do Bagy para o Gest√£oClick.
        
        Returns:
            tuple: (sucesso, erros)
        """
        total_success = 0
        total_errors = 0
        
        self.logger.info("üîÑ Iniciando sincroniza√ß√£o de pedidos do Bagy para Gest√£oClick")
        
        try:
            # Obter pedidos do Bagy
            pagination = Pagination()
            all_bagy_orders = pagination.get_all_pages(
                fetcher=self.bagy_client.get_orders,
                data_key='data'
            )
            
            self.logger.info(f"üõí Encontrados {len(all_bagy_orders)} pedidos no Bagy")
            
            # Processar cada pedido
            for bagy_order in all_bagy_orders:
                try:
                    # Implementa√ß√£o da sincroniza√ß√£o de pedidos
                    pass
                except Exception as e:
                    total_errors += 1
                    self.logger.error(f"‚ùå Erro ao processar pedido: {str(e)}")
            
            self.logger.info(f"‚ú® Sincroniza√ß√£o de pedidos conclu√≠da: {total_success} com sucesso, {total_errors} erros")
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao sincronizar pedidos: {str(e)}")
            return 0, 1
        
        return total_success, total_errors
    
    def sync_all(self):
        """
        Executa sincroniza√ß√£o completa em ambas as dire√ß√µes.
        
        Returns:
            dict: Resultados da sincroniza√ß√£o
        """
        self.logger.info(f"üîÑ Iniciando sincroniza√ß√£o bidirecional completa em {datetime.now().isoformat()}")
        
        start_time = time.time()
        
        # Sincronizar produtos (Gest√£oClick -> Bagy)
        self.logger.info("üì¶ Iniciando sincroniza√ß√£o de produtos do Gest√£oClick para Bagy...")
        products_success, products_errors = self.sync_products_from_gestaoclick()
        
        # Sincronizar clientes (Bagy -> Gest√£oClick)
        self.logger.info("üë• Iniciando sincroniza√ß√£o de clientes do Bagy para Gest√£oClick...")
        customers_success, customers_errors = self.sync_customers()
        
        # Sincronizar pedidos (Bagy -> Gest√£oClick)
        self.logger.info("üõí Iniciando sincroniza√ß√£o de pedidos do Bagy para Gest√£oClick...")
        orders_success, orders_errors = self.sync_orders()
        
        end_time = time.time()
        duration_seconds = end_time - start_time
        
        self.logger.info(f"‚ú® Sincroniza√ß√£o conclu√≠da em {duration_seconds:.2f} segundos")
        
        # Exibir resumo
        self.logger.info("""
üìä Resumo da sincroniza√ß√£o:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üïí In√≠cio: {start}
üïï Fim: {end}
‚è±Ô∏è Dura√ß√£o: {duration:.2f} segundos
üì¶ Produtos (Gest√£oClick ‚Üí Bagy):
   ‚úÖ Sucesso: {products_success}
   ‚ùå Erros: {products_errors}
üë• Clientes (Bagy ‚Üí Gest√£oClick):
   ‚úÖ Sucesso: {customers_success}
   ‚ùå Erros: {customers_errors}
üõí Pedidos (Bagy ‚Üí Gest√£oClick):
   ‚úÖ Sucesso: {orders_success}
   ‚ùå Erros: {orders_errors}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ""".format(
            start=datetime.fromtimestamp(start_time).isoformat(),
            end=datetime.fromtimestamp(end_time).isoformat(),
            duration=duration_seconds,
            products_success=products_success,
            products_errors=products_errors,
            customers_success=customers_success,
            customers_errors=customers_errors,
            orders_success=orders_success,
            orders_errors=orders_errors
        ))
        
        # Retornar resultados
        return {
            'start_time': datetime.fromtimestamp(start_time).isoformat(),
            'end_time': datetime.fromtimestamp(end_time).isoformat(),
            'duration_seconds': duration_seconds,
            'products_to_bagy': {
                'success': products_success,
                'errors': products_errors
            },
            'customers_to_gestaoclick': {
                'success': customers_success,
                'errors': customers_errors
            },
            'orders_to_gestaoclick': {
                'success': orders_success,
                'errors': orders_errors
            }
        }
    
    def start_scheduled_sync(self, interval_minutes=60):
        """
        Inicia sincroniza√ß√£o agendada em intervalos regulares.
        
        Args:
            interval_minutes (int): Intervalo entre sincroniza√ß√µes em minutos
        """
        self.logger.info(f"üïí Iniciando sincroniza√ß√£o agendada a cada {interval_minutes} minutos")
        
        try:
            while True:
                self.sync_all()
                self.logger.info(f"‚è∞ Aguardando {interval_minutes} minutos at√© a pr√≥xima sincroniza√ß√£o...")
                time.sleep(interval_minutes * 60)
        except KeyboardInterrupt:
            self.logger.info("üëã Sincroniza√ß√£o agendada interrompida")
        except Exception as e:
            self.logger.error(f"‚ùå Erro na sincroniza√ß√£o agendada: {str(e)}")