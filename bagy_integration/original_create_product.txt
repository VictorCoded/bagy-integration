    def create_product(self, product_data):
        """
        Create a new product in Bagy.
        
        Args:
            product_data (dict): Product data
            
        Returns:
            dict: Created product data
        """
        self.logger.info(f"Creating new product in Bagy: {product_data.get('name', 'Unknown')}")
        
        # Verificar se o produto j√° existe pelo external_id
        external_id = product_data.get('external_id')
        if external_id:
            existing_product = self.get_product_by_external_id(external_id)
            if existing_product:
                self.logger.info(f"Produto com external_id {external_id} j√° existe no Bagy (ID: {existing_product.get('id')})")
                return existing_product
        # Se faltar alguma dimens√£o, adicionamos valores padr√£o m√≠nimos aceitos pela API
        if 'depth' not in product_data or 'width' not in product_data or 'height' not in product_data or 'weight' not in product_data:
            self.logger.warning(f"‚ö†Ô∏è Produto com dimens√µes incompletas ser√° criado com valores m√≠nimos: {product_data.get('name', 'Unknown')}")
            
            # Adicionar valores padr√£o m√≠nimos para dimens√µes faltantes
            if 'depth' not in product_data:
                product_data['depth'] = "0.1"
            if 'width' not in product_data:
                product_data['width'] = "0.1"
            if 'height' not in product_data:
                product_data['height'] = "0.1"
            if 'weight' not in product_data:
                product_data['weight'] = "0.1"
        
        # NOVA ABORDAGEM SEGUNDO SUPORTE BAGY:
        # 1. Para produtos com varia√ß√µes, criar o produto principal PRIMEIRO
        # 2. Depois criar cada varia√ß√£o SEPARADAMENTE
        # 3. Verificar cores existentes para evitar o erro "color_attribute_already_exists"
        
        # Verificar se √© um produto com varia√ß√µes
        original_variations = []
        is_variant_product = False
        
        if product_data.get('type') == "variant" and 'variations' in product_data and product_data['variations']:
            is_variant_product = True
            original_variations = product_data['variations'].copy()
            self.logger.info(f"üîç NOVA ABORDAGEM BAGY: Primeiro criar produto base, depois cada varia√ß√£o separadamente")
            self.logger.info(f"üîç Produto cont√©m {len(original_variations)} varia√ß√µes que ser√£o criadas separadamente")
            
            # Remover as varia√ß√µes do payload principal (seguindo orienta√ß√£o do suporte Bagy)
            del product_data['variations']
        elif 'variations' in product_data:
            # Para produtos simples, remover as varia√ß√µes
            self.logger.info(f"üîç Produto simples: removendo {len(product_data.get('variations', []))} varia√ß√µes")
            if 'variations' in product_data:
                del product_data['variations']
        
        # Garantir que campos cr√≠ticos estejam como strings
        for codigo_field in ['sku', 'reference', 'code']:
            if codigo_field in product_data and product_data[codigo_field] is not None:
                product_data[codigo_field] = str(product_data[codigo_field])
                self.logger.info(f"üîß Garantindo que {codigo_field} seja string: '{product_data[codigo_field]}'")
        
        # Criar produto principal
        self.logger.info(f"üì¶ Criando produto principal: {product_data.get('name')}")
        response = self._make_request(
            method="POST", 
            endpoint="/products",
            data=product_data,
            headers=self._get_headers()
        )
        
        # Verificar se o produto foi criado com sucesso
        if response and 'id' in response:
            product_id = response['id']
            self.logger.info(f"‚úÖ Produto principal criado com sucesso (ID: {product_id})")
            
            # Criar varia√ß√µes separadamente, conforme orienta√ß√£o do suporte Bagy
            if is_variant_product and original_variations:
                successful_variations = 0
                
                for i, variation in enumerate(original_variations):
                    # Adicionar o product_id √† varia√ß√£o
                    variation['product_id'] = product_id
                    
                    self.logger.info(f"üîÑ Criando varia√ß√£o {i+1}/{len(original_variations)} para o produto {product_id}")
                    
                    # IMPORTANTE: Modificar atributos para garantir cor √∫nica
                    variation_data = variation.copy()
                    
                    # Cada varia√ß√£o precisa de uma cor diferente na Bagy
                    # Em vez de remover atributos, vamos adicionar um ID de cor √∫nico
                    if 'attributes' not in variation_data:
                        variation_data['attributes'] = []
                        
                    # Remover qualquer atributo de cor existente para evitar conflitos
                    new_attributes = []
                    for attr in variation_data.get('attributes', []):
                        if attr.get('name', '').lower() != 'cor' and attr.get('name', '').lower() != 'color':
                            new_attributes.append(attr)
                    
                    # Adicionar atributo de cor √∫nico baseado no timestamp e √≠ndice
                    import time
                    unique_color_id = f"color-{int(time.time())}-{i}"
                    color_name = f"Cor {i+1}"
                    
                    # Para varia√ß√µes que j√° t√™m nome, usar como parte do nome da cor
                    for attr in variation.get('attributes', []):
                        if attr.get('name', '').lower() not in ['cor', 'color']:
                            option_value = attr.get('value', '')
                            if option_value:
                                color_name = f"{option_value}"
                                break
                    
                    new_attributes.append({
                        "name": "Cor", 
                        "value": color_name,
                        "id": unique_color_id
                    })
                    
                    variation_data['attributes'] = new_attributes
                    self.logger.info(f"üîß Adicionando ID de cor √∫nico: '{unique_color_id}' nome: '{color_name}'")
                    
                    
                    # Garantir campos cr√≠ticos nas varia√ß√µes como strings
                    for codigo_field in ['sku', 'reference', 'code']:
                        if codigo_field in variation_data and variation_data[codigo_field] is not None:
                            variation_data[codigo_field] = str(variation_data[codigo_field])
                            self.logger.info(f"üîß Garantindo que {codigo_field} da varia√ß√£o seja string: '{variation_data[codigo_field]}'")
                    
                    # Garantir que a varia√ß√£o tenha um SKU v√°lido
                    if not variation_data.get('sku'):
                        if variation_data.get('reference'):
                            variation_data['sku'] = str(variation_data['reference'])
                        else:
                            variation_data['sku'] = f"var-{product_id}-{i+1}"
                        self.logger.info(f"üîß Definindo SKU da varia√ß√£o: '{variation_data['sku']}'")
                    
                    # Garantir que a varia√ß√£o tenha uma refer√™ncia
                    if not variation_data.get('reference'):
                        variation_data['reference'] = variation_data['sku']
                        self.logger.info(f"üîß Definindo reference da varia√ß√£o: '{variation_data['reference']}'")
                    
                    # Garantir que a varia√ß√£o tenha um c√≥digo
                    if not variation_data.get('code'):
                        variation_data['code'] = variation_data['sku']
                        self.logger.info(f"üîß Definindo code da varia√ß√£o: '{variation_data['code']}'")
                    
                    # Garantir que a varia√ß√£o tenha um estoque
                    if 'balance' not in variation_data:
                        variation_data['balance'] = 0
                        self.logger.info(f"üîß Definindo estoque da varia√ß√£o como 0")
                    
                    try:
                        # Conforme exemplo da documenta√ß√£o da Bagy, precisamos simplificar o payload da varia√ß√£o
                        # e usar obrigatoriamente o color_id
                        
                        # 1. Extrair um nome para a cor da varia√ß√£o
                        color_name = None
                        
                        # Op√ß√£o 1: Tentar obter um atributo espec√≠fico de cor
                        if 'attributes' in variation_data:
                            for attr in variation_data.get('attributes', []):
                                if attr.get('name') == 'Cor':
                                    color_name = attr.get('value')
                                    self.logger.info(f"üé® Encontrou atributo 'Cor' com valor '{color_name}'")
                                    break
                        
                        # Op√ß√£o 2: Tentar obter qualquer atributo como nome de cor
                        if not color_name and 'attributes' in variation_data and variation_data['attributes']:
                            # Usar o primeiro atributo como nome da cor
                            color_name = variation_data['attributes'][0].get('value')
                            self.logger.info(f"üé® Usando primeiro atributo como nome de cor: '{color_name}'")
                        
                        # Op√ß√£o 3: Criar um nome de cor √∫nico baseado no SKU da varia√ß√£o
                        if not color_name:
                            color_name = f"Cor-{variation_data.get('sku', '')}"
                            self.logger.info(f"üé® Criando nome de cor baseado no SKU: '{color_name}'")
                        
                        # 2. Garantir que a cor exista na plataforma e obter o ID
                        self.logger.info(f"üé® Criando/verificando cor na API: '{color_name}'")
                        color_id = self.ensure_color_exists(color_name)
                        if not color_id:
                            self.logger.error(f"‚ùå N√£o foi poss√≠vel criar/encontrar cor '{color_name}'")
                            return None
                        
                        # 3. Criar um payload simplificado conforme o exemplo da documenta√ß√£o
                        simple_variation = {
                            "product_id": variation_data.get('product_id'),
                            "color_id": color_id,                       # Obrigat√≥rio
                            "external_id": variation_data.get('external_id'),
                            "reference": variation_data.get('reference'),
                            "sku": variation_data.get('sku'),
                            "gtin": variation_data.get('gtin', ''),
                            "price": variation_data.get('price'),
                            "price_compare": variation_data.get('price_compare', ''),
                            "active": True,
                            "balance": variation_data.get('balance', 0)
                        }
                        
                        self.logger.info(f"üîÑ Payload da varia√ß√£o simplificado para formato correto conforme documenta√ß√£o")
                        
                        # Usar o payload simplificado em vez do original
                        variation_data = simple_variation
                        
                        # Registrar o payload exato para fins de debug/suporte
                        import json
                        payload_dump = json.dumps(variation_data, indent=2)
                        headers_dump = json.dumps(self._get_headers(), indent=2)
                        self.logger.info(f"üì§ ENVIANDO PARA BAGY (/variations) - Payload: {payload_dump}")
                        self.logger.info(f"üì§ ENVIANDO PARA BAGY (/variations) - Headers: {headers_dump}")
                        
                        variation_response = self._make_request(
                            method="POST",
                            endpoint="/variations",
                            data=variation_data,
                            headers=self._get_headers()
                        )
                        
                        if variation_response and 'id' in variation_response:
                            self.logger.info(f"‚úÖ Varia√ß√£o {i+1} criada com sucesso (ID: {variation_response['id']})")
                            successful_variations += 1
                        else:
                            self.logger.warning(f"‚ö†Ô∏è Falha ao criar varia√ß√£o {i+1}. Resposta: {variation_response}")
                    
                    except Exception as e:
                        error_msg = str(e)
                        self.logger.error(f"‚ùå Erro ao criar varia√ß√£o {i+1}: {error_msg}")
                        
                        # Registrar detalhes completos da exce√ß√£o para an√°lise
                        import traceback
                        self.logger.error(f"‚ùå Detalhes da exce√ß√£o: {traceback.format_exc()}")
                
                self.logger.info(f"‚ú® Total: {successful_variations} de {len(original_variations)} varia√ß√µes criadas para o produto {product_id}")
                
                # Obter o produto atualizado com todas as varia√ß√µes
                updated_product = self.get_product_by_id(product_id)
                if updated_product:
                    response = updated_product
            
            return response
        else:
            self.logger.error(f"‚ùå Falha ao criar produto: {product_data.get('name')}. Resposta: {response}")
            return response
    
