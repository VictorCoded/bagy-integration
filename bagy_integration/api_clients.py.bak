"""
API Client implementations for Bagy and GestãoClick APIs.
"""
import logging
import time
import json
import requests
from requests.exceptions import RequestException
import config

class APIClient:
    """Base API client with common functionality."""
    
    def __init__(self, base_url, retry_count=config.MAX_RETRIES, retry_delay=config.RETRY_DELAY_SECONDS):
        self.base_url = base_url
        self.retry_count = retry_count
        self.retry_delay = retry_delay
        self.logger = logging.getLogger(self.__class__.__name__)
    
    def _make_request(self, method, endpoint, params=None, data=None, headers=None):
        """
        Make an HTTP request with retry logic.
        
        Args:
            method (str): HTTP method (GET, POST, PUT, etc.)
            endpoint (str): API endpoint to call
            params (dict, optional): Query parameters
            data (dict, optional): Request body data
            headers (dict, optional): HTTP headers
            
        Returns:
            dict: API response data
            
        Raises:
            RequestException: If the request fails after all retries
        """
        url = f"{self.base_url}/{endpoint.lstrip('/')}"
        method = method.upper()
        
        for attempt in range(self.retry_count + 1):
            try:
                self.logger.debug(f"Making {method} request to {url} (Attempt {attempt + 1}/{self.retry_count + 1})")
                
                # Log de dados para depuração
                if data and method in ['POST', 'PUT']:
                    self.logger.debug(f"Request body: {json.dumps(data, indent=2)}")
                
                response = requests.request(
                    method=method,
                    url=url,
                    params=params,
                    json=data,
                    headers=headers
                )
                
                # Log de resposta para depuração em caso de erro
                if not response.ok:
                    self.logger.error(f"Response error {response.status_code}: {response.text}")
                
                response.raise_for_status()
                return response.json()
                
            except RequestException as e:
                self.logger.warning(f"Request failed: {str(e)}")
                
                if attempt < self.retry_count:
                    sleep_time = self.retry_delay * (2 ** attempt)  # Exponential backoff
                    self.logger.info(f"Retrying in {sleep_time} seconds...")
                    time.sleep(sleep_time)
                else:
                    self.logger.error(f"Request failed after {self.retry_count + 1} attempts")
                    raise


class BagyClient(APIClient):
    """Client for interacting with Bagy API."""
    
    def __init__(self, api_key):
        super().__init__(config.BAGY_BASE_URL)
        self.api_key = api_key
        # Dicionário para cache de cores para evitar requisições repetidas
        self.color_cache = {}
        
    def _get_headers(self):
        """Get default headers for Bagy API."""
        return {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }
        
    def get_colors(self):
        """
        Lista todas as cores disponíveis na Bagy.
        
        Returns:
            dict: Lista de cores disponíveis
        """
        self.logger.info("Obtendo lista de cores cadastradas na Bagy")
        return self._make_request(
            method="GET",
            endpoint="/colors",
            headers=self._get_headers()
        )

    def create_color(self, color_data):
        """
        Cria uma nova cor na Bagy.
        
        Args:
            color_data (dict): Dados da cor a ser criada
            
        Returns:
            dict: Dados da cor criada
        """
        self.logger.info(f"Criando cor na Bagy: {color_data.get('name', 'Desconhecido')}")
        
        # Verificar se cor já existe com o mesmo nome
        existing_colors = self.get_colors()
        if existing_colors and 'data' in existing_colors:
            for color in existing_colors['data']:
                if color.get('name').lower() == color_data.get('name', '').lower():
                    self.logger.info(f"Cor com nome {color_data.get('name')} já existe (ID: {color.get('id')})")
                    return color
        
        # Cria uma nova cor se não existir
        response = self._make_request(
            method="POST",
            endpoint="/colors",
            data=color_data,
            headers=self._get_headers()
        )
        
        if response:
            self.logger.info(f"Cor criada com sucesso: {response.get('name', 'Desconhecido')} (ID: {response.get('id')})")
        else:
            self.logger.error(f"Falha ao criar cor: {color_data.get('name', 'Desconhecido')}")
        
        return response

    def ensure_color_exists(self, color_name, hex_color="#000000"):
        """
        Garante que uma cor exista no sistema, criando-a se necessário.
        
        Args:
            color_name (str): Nome da cor
            hex_color (str): Código hexadecimal da cor
            
        Returns:
            int: ID da cor na Bagy
        """
        # Verificar cache primeiro
        if color_name.lower() in self.color_cache:
            self.logger.info(f"Cor {color_name} encontrada no cache (ID: {self.color_cache[color_name.lower()]})")
            return self.color_cache[color_name.lower()]
            
        self.logger.info(f"Verificando se cor {color_name} existe na Bagy")
        
        # Verificar se cor já existe
        existing_colors = self.get_colors()
        if existing_colors and 'data' in existing_colors:
            for color in existing_colors['data']:
                if color.get('name').lower() == color_name.lower():
                    color_id = color.get('id')
                    self.logger.info(f"Cor {color_name} já existe (ID: {color_id})")
                    # Adicionar ao cache
                    self.color_cache[color_name.lower()] = color_id
                    return color_id
        
        # Criar cor se não existir
        color_data = {
            "external_id": None,
            "name": color_name,
            "hexadecimal": hex_color,
            "image": None,
            "position": 99,
            "active": True
        }
        
        response = self.create_color(color_data)
        if response and 'id' in response:
            color_id = response['id']
            # Adicionar ao cache
            self.color_cache[color_name.lower()] = color_id
            return color_id
        else:
            self.logger.error(f"Não foi possível garantir que a cor {color_name} exista")
            return None
    
    def get_products(self, page=1, limit=100):
        """
        Get products from Bagy.
        
        Args:
            page (int): Page number for pagination
            limit (int): Number of products per page
            
        Returns:
            dict: Products data
        """
        self.logger.info(f"Fetching products from Bagy (page {page}, limit {limit})")
        return self._make_request(
            method="GET",
            endpoint="/products",
            params={"page": page, "limit": limit},
            headers=self._get_headers()
        )
    
    def get_customers(self, page=1, limit=100):
        """
        Get customers from Bagy.
        
        Args:
            page (int): Page number for pagination
            limit (int): Number of customers per page
            
        Returns:
            dict: Customers data
        """
        self.logger.info(f"Fetching customers from Bagy (page {page}, limit {limit})")
        return self._make_request(
            method="GET",
            endpoint="/customers",
            params={"page": page, "limit": limit},
            headers=self._get_headers()
        )
    
    def get_orders(self, page=1, limit=100):
        """
        Get orders from Bagy.
        
        Args:
            page (int): Page number for pagination
            limit (int): Number of orders per page
            
        Returns:
            dict: Orders data
        """
        self.logger.info(f"Fetching orders from Bagy (page {page}, limit {limit})")
        return self._make_request(
            method="GET",
            endpoint="/orders",
            params={"page": page, "limit": limit},
            headers=self._get_headers()
        )
        
    def get_categories(self, page=1, limit=100):
        """
        Get categories from Bagy.
        
        Args:
            page (int): Page number for pagination
            limit (int): Number of categories per page
            
        Returns:
            dict: Categories data
        """
        self.logger.info(f"Fetching categories from Bagy (page {page}, limit {limit})")
        return self._make_request(
            method="GET",
            endpoint="/categories",
            params={"page": page, "limit": limit},
            headers=self._get_headers()
        )
    
    def create_category(self, category_data):
        """
        Create a new category in Bagy.
        
        Args:
            category_data (dict): Category data
            
        Returns:
            dict: Created category data
        """
        self.logger.info(f"Creating new category in Bagy: {category_data.get('name', 'Unknown')}")
        return self._make_request(
            method="POST",
            endpoint="/categories",
            data=category_data,
            headers=self._get_headers()
        )
        
    def get_category_by_name(self, name):
        """
        Get a category by name from Bagy.
        
        Args:
            name (str): Category name
            
        Returns:
            dict or None: Category data if found, None otherwise
        """
        self.logger.debug(f"Searching for category with name: {name}")
        try:
            response = self._make_request(
                method="GET",
                endpoint="/categories",
                params={"name": name},
                headers=self._get_headers()
            )
            
            # Check if any category matches the exact name
            if response and 'data' in response and response['data']:
                for category in response['data']:
                    if category.get('name', '').lower() == name.lower():
                        return category
            
            return None
        except Exception as e:
            self.logger.error(f"Error fetching category by name: {str(e)}")
            return None
    
    def get_product_by_id(self, product_id):
        """
        Get a specific product by ID.
        
        Args:
            product_id (str): Product ID
            
        Returns:
            dict: Product data
        """
        self.logger.info(f"Fetching product details for ID: {product_id}")
        return self._make_request(
            method="GET",
            endpoint=f"/products/{product_id}",
            headers=self._get_headers()
        )
        
    def get_product_by_external_id(self, external_id):
        """
        Get a product by external ID from Bagy.
        
        Args:
            external_id (str): External product ID
            
        Returns:
            dict or None: Product data if found, None otherwise
        """
        self.logger.info(f"Buscando produto com external_id: {external_id}")
        
        # Primeiro tenta buscar pelo parâmetro external_id
        try:
            response = self._make_request(
                method="GET",
                endpoint="/products",
                params={"external_id": external_id},
                headers=self._get_headers()
            )
            
            if response and isinstance(response, dict) and response.get('data') and len(response['data']) > 0:
                self.logger.info(f"Produto encontrado com external_id={external_id} (ID: {response['data'][0].get('id')})")
                return response['data'][0]  # Return the first matching product
        except Exception as e:
            self.logger.warning(f"Erro na busca por external_id: {str(e)}")
        
        # Se não encontrou, tenta uma abordagem mais exaustiva buscando em todas as páginas
        self.logger.info(f"Fazendo busca exaustiva por produto com external_id: {external_id}")
        try:
            # Busca em todas as páginas até encontrar o produto
            page = 1
            limit = 100
            max_pages = 10  # Limite para não processar infinitamente
            
            while page <= max_pages:
                response = self._make_request(
                    method="GET",
                    endpoint="/products",
                    params={"page": page, "limit": limit},
                    headers=self._get_headers()
                )
                
                if not response or not isinstance(response, dict) or not response.get('data'):
                    break
                    
                # Procura em cada produto na página
                for product in response['data']:
                    if product.get('external_id') == external_id:
                        self.logger.info(f"Produto encontrado na página {page} com external_id={external_id} (ID: {product.get('id')})")
                        return product
                
                # Se não há mais páginas, sair do loop
                if len(response['data']) < limit:
                    break
                    
                page += 1
                
            self.logger.warning(f"Produto não encontrado com external_id: {external_id} após busca exaustiva")
            return None
        except Exception as e:
            self.logger.warning(f"Erro na busca exaustiva por external_id: {str(e)}")
            return None
    

    def create_product(self, product_data):
        """
        Create a new product in Bagy.
        
        Args:
            product_data (dict): Product data
            
        Returns:
            dict: Created product data
        """
        self.logger.info(f"Creating new product in Bagy: {product_data.get('name', 'Unknown')}")
        
        # Verificar se o produto já existe pelo external_id
        external_id = product_data.get('external_id')
        if external_id:
            existing_product = self.get_product_by_external_id(external_id)
            if existing_product:
                self.logger.info(f"Produto com external_id {external_id} já existe no Bagy (ID: {existing_product.get('id')})")
                return existing_product
        # Se faltar alguma dimensão, adicionamos valores padrão mínimos aceitos pela API
        if 'depth' not in product_data or 'width' not in product_data or 'height' not in product_data or 'weight' not in product_data:
            self.logger.warning(f"⚠️ Produto com dimensões incompletas será criado com valores mínimos: {product_data.get('name', 'Unknown')}")
            
            # Adicionar valores padrão mínimos para dimensões faltantes
            if 'depth' not in product_data:
                product_data['depth'] = "0.1"
            if 'width' not in product_data:
                product_data['width'] = "0.1"
            if 'height' not in product_data:
                product_data['height'] = "0.1"
            if 'weight' not in product_data:
                product_data['weight'] = "0.1"
        
        # NOVA ABORDAGEM SEGUNDO SUPORTE BAGY:
        # 1. Para produtos com variações, criar o produto principal PRIMEIRO
        # 2. Depois criar cada variação SEPARADAMENTE
        # 3. Verificar cores existentes para evitar o erro "color_attribute_already_exists"
        
        # Verificar se é um produto com variações
        original_variations = []
        is_variant_product = False
        
        if product_data.get('type') == "variant" and 'variations' in product_data and product_data['variations']:
            is_variant_product = True
            original_variations = product_data['variations'].copy()
            self.logger.info(f"🔍 NOVA ABORDAGEM BAGY: Primeiro criar produto base, depois cada variação separadamente")
            self.logger.info(f"🔍 Produto contém {len(original_variations)} variações que serão criadas separadamente")
            
            # Remover as variações do payload principal (seguindo orientação do suporte Bagy)
            del product_data['variations']
        elif 'variations' in product_data:
            # Para produtos simples, remover as variações
            self.logger.info(f"🔍 Produto simples: removendo {len(product_data.get('variations', []))} variações")
            if 'variations' in product_data:
                del product_data['variations']
        
        # Garantir que campos críticos estejam como strings
        for codigo_field in ['sku', 'reference', 'code']:
            if codigo_field in product_data and product_data[codigo_field] is not None:
                product_data[codigo_field] = str(product_data[codigo_field])
                self.logger.info(f"🔧 Garantindo que {codigo_field} seja string: '{product_data[codigo_field]}'")
        
        # Criar produto principal
        self.logger.info(f"📦 Criando produto principal: {product_data.get('name')}")
        response = self._make_request(
            method="POST", 
            endpoint="/products",
            data=product_data,
            headers=self._get_headers()
        )
        
        # Verificar se o produto foi criado com sucesso
        if response and 'id' in response:
            product_id = response['id']
            self.logger.info(f"✅ Produto principal criado com sucesso (ID: {product_id})")
            
            # Criar variações separadamente, conforme orientação do suporte Bagy
            if is_variant_product and original_variations:
                successful_variations = 0
                
                for i, variation in enumerate(original_variations):
                    # Adicionar o product_id à variação
                    variation['product_id'] = product_id
                    
                    self.logger.info(f"🔄 Criando variação {i+1}/{len(original_variations)} para o produto {product_id}")
                    
                    # IMPORTANTE: Modificar atributos para garantir cor única
                    variation_data = variation.copy()
                    
                    # Cada variação precisa de uma cor diferente na Bagy
                    # Em vez de remover atributos, vamos adicionar um ID de cor único
                    if 'attributes' not in variation_data:
                        variation_data['attributes'] = []
                        
                    # Remover qualquer atributo de cor existente para evitar conflitos
                    new_attributes = []
                    for attr in variation_data.get('attributes', []):
                        if attr.get('name', '').lower() != 'cor' and attr.get('name', '').lower() != 'color':
                            new_attributes.append(attr)
                    
                    # Adicionar atributo de cor único baseado no timestamp e índice
                    import time
                    unique_color_id = f"color-{int(time.time())}-{i}"
                    color_name = f"Cor {i+1}"
                    
                    # Para variações que já têm nome, usar como parte do nome da cor
                    for attr in variation.get('attributes', []):
                        if attr.get('name', '').lower() not in ['cor', 'color']:
                            option_value = attr.get('value', '')
                            if option_value:
                                color_name = f"{option_value}"
                                break
                    
                    new_attributes.append({
                        "name": "Cor", 
                        "value": color_name,
                        "id": unique_color_id
                    })
                    
                    variation_data['attributes'] = new_attributes
                    self.logger.info(f"🔧 Adicionando ID de cor único: '{unique_color_id}' nome: '{color_name}'")
                    
                    
                    # Garantir campos críticos nas variações como strings
                    for codigo_field in ['sku', 'reference', 'code']:
                        if codigo_field in variation_data and variation_data[codigo_field] is not None:
                            variation_data[codigo_field] = str(variation_data[codigo_field])
                            self.logger.info(f"🔧 Garantindo que {codigo_field} da variação seja string: '{variation_data[codigo_field]}'")
                    
                    # Garantir que a variação tenha um SKU válido
                    if not variation_data.get('sku'):
                        if variation_data.get('reference'):
                            variation_data['sku'] = str(variation_data['reference'])
                        else:
                            variation_data['sku'] = f"var-{product_id}-{i+1}"
                        self.logger.info(f"🔧 Definindo SKU da variação: '{variation_data['sku']}'")
                    
                    # Garantir que a variação tenha uma referência
                    if not variation_data.get('reference'):
                        variation_data['reference'] = variation_data['sku']
                        self.logger.info(f"🔧 Definindo reference da variação: '{variation_data['reference']}'")
                    
                    # Garantir que a variação tenha um código
                    if not variation_data.get('code'):
                        variation_data['code'] = variation_data['sku']
                        self.logger.info(f"🔧 Definindo code da variação: '{variation_data['code']}'")
                    
                    # Garantir que a variação tenha um estoque
                    if 'balance' not in variation_data:
                        variation_data['balance'] = 0
                        self.logger.info(f"🔧 Definindo estoque da variação como 0")
                    
                    try:
                        # Conforme exemplo da documentação da Bagy, precisamos simplificar o payload da variação
                        # e usar obrigatoriamente o color_id
                        
                        # 1. Extrair um nome para a cor da variação
                        color_name = None
                        
                        # Opção 1: Tentar obter um atributo específico de cor
                        if 'attributes' in variation_data:
                            for attr in variation_data.get('attributes', []):
                                if attr.get('name') == 'Cor':
                                    color_name = attr.get('value')
                                    self.logger.info(f"🎨 Encontrou atributo 'Cor' com valor '{color_name}'")
                                    break
                        
                        # Opção 2: Tentar obter qualquer atributo como nome de cor
                        if not color_name and 'attributes' in variation_data and variation_data['attributes']:
                            # Usar o primeiro atributo como nome da cor
                            color_name = variation_data['attributes'][0].get('value')
                            self.logger.info(f"🎨 Usando primeiro atributo como nome de cor: '{color_name}'")
                        
                        # Opção 3: Criar um nome de cor único baseado no SKU da variação
                        if not color_name:
                            color_name = f"Cor-{variation_data.get('sku', '')}"
                            self.logger.info(f"🎨 Criando nome de cor baseado no SKU: '{color_name}'")
                        
                        # 2. Garantir que a cor exista na plataforma e obter o ID
                        self.logger.info(f"🎨 Criando/verificando cor na API: '{color_name}'")
                        color_id = self.ensure_color_exists(color_name)
                        if not color_id:
                            self.logger.error(f"❌ Não foi possível criar/encontrar cor '{color_name}'")
                            return None
                        
                        # 3. Criar um payload simplificado conforme o exemplo da documentação
                        simple_variation = {
                            "product_id": variation_data.get('product_id'),
                            "color_id": color_id,                       # Obrigatório
                            "external_id": variation_data.get('external_id'),
                            "reference": variation_data.get('reference'),
                            "sku": variation_data.get('sku'),
                            "gtin": variation_data.get('gtin', ''),
                            "price": variation_data.get('price'),
                            "price_compare": variation_data.get('price_compare', ''),
                            "active": True,
                            "balance": variation_data.get('balance', 0)
                        }
                        
                        self.logger.info(f"🔄 Payload da variação simplificado para formato correto conforme documentação")
                        
                        # Usar o payload simplificado em vez do original
                        variation_data = simple_variation
                        
                        # Registrar o payload exato para fins de debug/suporte
                        import json
                        payload_dump = json.dumps(variation_data, indent=2)
                        headers_dump = json.dumps(self._get_headers(), indent=2)
                        self.logger.info(f"📤 ENVIANDO PARA BAGY (/variations) - Payload: {payload_dump}")
                        self.logger.info(f"📤 ENVIANDO PARA BAGY (/variations) - Headers: {headers_dump}")
                        
                        variation_response = self._make_request(
                            method="POST",
                            endpoint="/variations",
                            data=variation_data,
                            headers=self._get_headers()
                        )
                        
                        if variation_response and 'id' in variation_response:
                            self.logger.info(f"✅ Variação {i+1} criada com sucesso (ID: {variation_response['id']})")
                            successful_variations += 1
                        else:
                            self.logger.warning(f"⚠️ Falha ao criar variação {i+1}. Resposta: {variation_response}")
                    
                    except Exception as e:
                        error_msg = str(e)
                        self.logger.error(f"❌ Erro ao criar variação {i+1}: {error_msg}")
                        
                        # Registrar detalhes completos da exceção para análise
                        import traceback
                        self.logger.error(f"❌ Detalhes da exceção: {traceback.format_exc()}")
                
                self.logger.info(f"✨ Total: {successful_variations} de {len(original_variations)} variações criadas para o produto {product_id}")
                
                # Obter o produto atualizado com todas as variações
                updated_product = self.get_product_by_id(product_id)
                if updated_product:
                    response = updated_product
            
            return response
        else:
            self.logger.error(f"❌ Falha ao criar produto: {product_data.get('name')}. Resposta: {response}")
            return response
    
    def update_product(self, product_id, product_data):
        """
        Update a product in Bagy.
        
        Args:
            product_id (str): Product ID
            product_data (dict): Updated product data
            
        Returns:
            dict: Updated product data
        """
        self.logger.info(f"Updating product in Bagy with ID: {product_id}")
        
        # Verificar dimensões para atualização
        # Se faltar alguma dimensão, adicionamos valores padrão mínimos aceitos pela API
        if 'depth' not in product_data or 'width' not in product_data or 'height' not in product_data or 'weight' not in product_data:
            self.logger.warning(f"⚠️ Produto com dimensões incompletas será atualizado com valores mínimos: {product_data.get('name', 'Unknown')}")
            
            # Adicionar valores padrão mínimos para dimensões faltantes
            if 'depth' not in product_data:
                product_data['depth'] = "0.1"
            if 'width' not in product_data:
                product_data['width'] = "0.1"
            if 'height' not in product_data:
                product_data['height'] = "0.1"
            if 'weight' not in product_data:
                product_data['weight'] = "0.1"
        
        # CORREÇÃO: Garantir que os campos de código estejam como strings
        for codigo_field in ['sku', 'reference', 'code']:
            if codigo_field in product_data and product_data[codigo_field] is not None:
                # Garantir que seja uma string, mesmo que venha como número
                product_data[codigo_field] = str(product_data[codigo_field])
                self.logger.info(f"🔧 Garantindo que {codigo_field} (update) seja string: '{product_data[codigo_field]}'")
        
        return self._make_request(
            method="PUT",
            endpoint=f"/products/{product_id}",
            data=product_data,
            headers=self._get_headers()
        )
    
    def get_customer_by_id(self, customer_id):
        """
        Get a specific customer by ID.
        
        Args:
            customer_id (str): Customer ID
            
        Returns:
            dict: Customer data
        """
        self.logger.info(f"Fetching customer details for ID: {customer_id}")
        return self._make_request(
            method="GET",
            endpoint=f"/customers/{customer_id}",
            headers=self._get_headers()
        )
    
    def get_order_by_id(self, order_id):
        """
        Get a specific order by ID.
        
        Args:
            order_id (str): Order ID
            
        Returns:
            dict: Order data
        """
        self.logger.info(f"Fetching order details for ID: {order_id}")
        return self._make_request(
            method="GET",
            endpoint=f"/orders/{order_id}",
            headers=self._get_headers()
        )


class GestaoClickClient(APIClient):
    """Client for interacting with GestãoClick API."""
    
    def __init__(self, api_key, secret_key):
        super().__init__(config.GESTAOCLICK_BASE_URL)
        self.api_key = api_key
        self.secret_key = secret_key
    
    def _get_headers(self):
        """Get default headers for GestãoClick API."""
        return {
            "Content-Type": "application/json",
            "access-token": self.api_key,
            "secret-access-token": self.secret_key
        }
    
    def get_products(self, page=1, limit=100):
        """
        Get products from GestãoClick.
        
        Args:
            page (int): Page number for pagination
            limit (int): Number of products per page
            
        Returns:
            dict: Products data
        """
        self.logger.info(f"Fetching products from GestãoClick (page {page}, limit {limit})")
        # De acordo com a documentação, a API usa 'pagina' e 'limite' como parâmetros de paginação
        return self._make_request(
            method="GET",
            endpoint="produtos",
            params={"pagina": page, "limite": limit},
            headers=self._get_headers()
        )
    
    def get_product_by_sku(self, sku):
        """
        Get a product by SKU from GestãoClick.
        
        Args:
            sku (str): Product SKU
            
        Returns:
            dict: Product data or None if not found
        """
        self.logger.info(f"Searching for product with SKU: {sku}")
        try:
            return self._make_request(
                method="GET",
                endpoint="produtos",
                params={"codigo_interno": sku},
                headers=self._get_headers()
            )
        except RequestException:
            return None
    
    def create_product(self, product_data):
        """
        Create a new product in GestãoClick.
        
        Args:
            product_data (dict): Product data
            
        Returns:
            dict: Created product data
        """
        self.logger.info(f"Creating product: {product_data.get('nome', 'Unknown')}")
        return self._make_request(
            method="POST",
            endpoint="produtos",
            data=product_data,
            headers=self._get_headers()
        )
    
    def update_product(self, product_id, product_data):
        """
        Update a product in GestãoClick.
        
        Args:
            product_id (str): Product ID
            product_data (dict): Updated product data
            
        Returns:
            dict: Updated product data
        """
        self.logger.info(f"Updating product with ID: {product_id}")
        return self._make_request(
            method="PUT",
            endpoint=f"produtos/{product_id}",
            data=product_data,
            headers=self._get_headers()
        )
    
    def get_customers(self, page=1, limit=100):
        """
        Get customers from GestãoClick.
        
        Args:
            page (int): Page number for pagination
            limit (int): Number of customers per page
            
        Returns:
            dict: Customers data
        """
        self.logger.info(f"Fetching customers from GestãoClick (page {page}, limit {limit})")
        return self._make_request(
            method="GET",
            endpoint="clientes",
            params={"pagina": page, "limite": limit},
            headers=self._get_headers()
        )
    
    def get_customer_by_document(self, document):
        """
        Get a customer by document (CPF/CNPJ) from GestãoClick.
        
        Args:
            document (str): Customer document number
            
        Returns:
            dict: Customer data or None if not found
        """
        self.logger.info(f"Searching for customer with document: {document}")
        try:
            return self._make_request(
                method="GET",
                endpoint="clientes",
                params={"cpf_cnpj": document},
                headers=self._get_headers()
            )
        except RequestException:
            return None
    
    def get_customer_by_email(self, email):
        """
        Get a customer by email from GestãoClick.
        
        Args:
            email (str): Customer email
            
        Returns:
            dict: Customer data or None if not found
        """
        self.logger.info(f"Searching for customer with email: {email}")
        try:
            return self._make_request(
                method="GET",
                endpoint="clientes",
                params={"email": email},
                headers=self._get_headers()
            )
        except RequestException:
            return None
    
    def create_customer(self, customer_data):
        """
        Create a new customer in GestãoClick.
        
        Args:
            customer_data (dict): Customer data
            
        Returns:
            dict: Created customer data
        """
        self.logger.info(f"Creating customer: {customer_data.get('nome', 'Unknown')}")
        
        # Verificar e garantir que tipo_pessoa seja 'PF' ou 'PJ'
        if 'tipo_pessoa' in customer_data:
            if customer_data['tipo_pessoa'] not in ['PF', 'PJ']:
                documento = customer_data.get('cpf_cnpj', '')
                customer_data['tipo_pessoa'] = 'PF' if len(documento) <= 11 else 'PJ'
        
        return self._make_request(
            method="POST",
            endpoint="clientes",
            data=customer_data,
            headers=self._get_headers()
        )
    
    def update_customer(self, customer_id, customer_data):
        """
        Update a customer in GestãoClick.
        
        Args:
            customer_id (str): Customer ID
            customer_data (dict): Updated customer data
            
        Returns:
            dict: Updated customer data
        """
        self.logger.info(f"Updating customer with ID: {customer_id}")
        # Verificar e garantir que tipo_pessoa seja 'PF' ou 'PJ'
        if 'tipo_pessoa' in customer_data:
            if customer_data['tipo_pessoa'] not in ['PF', 'PJ']:
                documento = customer_data.get('cpf_cnpj', '')
                customer_data['tipo_pessoa'] = 'PF' if len(documento) <= 11 else 'PJ'
        
        return self._make_request(
            method="PUT",
            endpoint=f"clientes/{customer_id}",
            data=customer_data,
            headers=self._get_headers()
        )
    
    def get_orders(self, page=1, limit=100):
        """
        Get orders from GestãoClick.
        
        Args:
            page (int): Page number for pagination
            limit (int): Number of orders per page
            
        Returns:
            dict: Orders data
        """
        self.logger.info(f"Fetching orders from GestãoClick (page {page}, limit {limit})")
        return self._make_request(
            method="GET",
            endpoint="vendas",
            params={"pagina": page, "limite": limit},
            headers=self._get_headers()
        )
    
    def get_order_by_external_id(self, external_id):
        """
        Get an order by external ID from GestãoClick.
        
        Args:
            external_id (str): External order ID
            
        Returns:
            dict: Order data or None if not found
        """
        self.logger.info(f"Searching for order with external ID: {external_id}")
        try:
            return self._make_request(
                method="GET",
                endpoint="vendas",
                params={"codigo": external_id},
                headers=self._get_headers()
            )
        except RequestException:
            return None
    
    def create_order(self, order_data):
        """
        Create a new order in GestãoClick.
        
        Args:
            order_data (dict): Order data
            
        Returns:
            dict: Created order data
        """
        self.logger.info(f"Creating order with external ID: {order_data.get('codigo', 'Unknown')}")
        return self._make_request(
            method="POST",
            endpoint="vendas",
            data=order_data,
            headers=self._get_headers()
        )
    
    def update_order(self, order_id, order_data):
        """
        Update an order in GestãoClick.
        
        Args:
            order_id (str): Order ID
            order_data (dict): Updated order data
            
        Returns:
            dict: Updated order data
        """
        self.logger.info(f"Updating order with ID: {order_id}")
        return self._make_request(
            method="PUT",
            endpoint=f"vendas/{order_id}",
            data=order_data,
            headers=self._get_headers()
        )
